services:
  postgres:
    image: postgres:15-alpine
    container_name: evaluation_postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - evaluation_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:latest
    container_name: evaluation_adminer
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - evaluation_network

  backend:
    build: ./backend
    container_name: evaluation_backend
    environment:
      - FLASK_APP=run.py
      - FLASK_ENV=${FLASK_ENV}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - ALGORITHM=${ALGORITHM}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ADMIN_LOGIN=${ADMIN_LOGIN}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    volumes:
      - ./backend/app/uploads:/app/app/uploads
    expose:
      - "5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - evaluation_network
    restart: unless-stopped

  frontend:
    build: ./frontend
    container_name: evaluation_frontend
    expose:
      - "4173"
    depends_on:
      - backend
    networks:
      - evaluation_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: evaluation_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - backend
      - frontend
    networks:
      - evaluation_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  evaluation_network:
    driver: bridge
